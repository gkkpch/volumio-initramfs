#!/bin/sh

# Default PATH differs between shells, and is not automatically exported
# by klibc dash.  Make it consistent.
	export PATH=/sbin:/usr/sbin:/bin:/usr/bin

# Set modprobe env
	export MODPROBE_OPTIONS="-qb"

# Export relevant Volumio variables for dropping into a shell (breaks, debugging, panics)
	export BOOT_DELAY=
	export BOOT_PARTITION=
	export DATA_PARTITION=
	export IMAGE_PARTITION=
	export BOOT_DEVICE="mmcblk0"
	export HW_DEVICE="undefined"
	export OVERLAY_VERSION=">=V22"
	export SQUASH_FILE="/volumio_current.sqsh"
	export IMAGE_PARTITION=
	export NEWINIT=/sbin/init
	export REBOOT_MODE="normal"
	export SPLASH="false"
	export USEKMSG="no"
  export DATADEV=
	export debug=
  export panic=

  export break="cmdline,modules,backup-gpt,search-firmw-upd,search-fact-reset,krnl-rollbck,krnl-upd,resize-data,mnt-overlayfs,modfstab,switch-root"

	source scripts/functions
	source scripts/custom-functions

	[ -d /dev ] || mkdir -m 0755 /dev
	[ -d /root ] || mkdir -m 0700 /root
	[ -d /sys ] || mkdir /sys
	[ -d /proc ] || mkdir /proc
	[ -d /tmp ] || mkdir /tmp
	mkdir -p /var/lock
	mount -t sysfs none /sys
	mount -t proc none /proc

# shellcheck disable=SC2013
	for x in $(cat /proc/cmdline); do
		case $x in
		initramfs.clear)
			clear
			;;
		quiet)
			quiet=y
			;;
		esac
	done

	if [ "$quiet" != "y" ]; then
		quiet=n
		echo "Volumio initramfs loading, please wait..."
	fi
	export quiet

	mkdir /dev/pts
	mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

# Export the dpkg architecture
	export DPKG_ARCH=
	. /conf/arch.conf


	maybe_break cmdline

# Parse the kernel command line from grub.cfg / syslinux.cfg
#
	for p in $(cat /proc/cmdline); do
		key=${p%%=*}
		value=${p#*=}

		case $key in
		imgpart)
			IMAGE_PARTITION=$value
			;;
		bootpart)
			BOOT_PARTITION=$value
			;;
		datapart)
			DATA_PARTITION=$value
			;;
		imgfile)
			SQUASH_FILE=$value
			;;
		dps)
			DPS=$value
			;;
		genpnames)
			DO_GEN=yes
			;;
		bootdelay)
			BOOT_DELAY=$value
			;;
		bootdev)
			BOOT_DEVICE=$value
			;;
		bootconfig)
			BOOT_CONFIG=$value
			;;
		hwdevice)
			HW_DEVICE=$value
			;;
		use_kmsg)
	# no|yes
			USEKMSG=$value
			;;
		reboot)
	# normal|mcu
			REBOOT_MODE=$value
			;;
		esac
	done

	# Handle known overlay fs syntax differencers (pre-3.18 kernels)
	#
	case $HW_DEVICE in
		ODROIDC|gs705a)
			OVERLAY_VERSION="V20"
			;;
		ODROID-C2)
			OVERLAY_VERSION="V21"
			;;
	esac

# Handle debug and panic settings separately
#
	for p in $(cat /proc/cmdline); do
		key=${p%%=*}
		value=${p#*=}
		case $key in
		debug)
			debug=y
			quiet=n
			if [ USEKMSG ]; then
				log_output=/dev/kmsg
			else
				log_output=/run/initramfs/initramfs.debug
			fi
			set -x
			;;
		panic=*)
			panic="${x#panic=}"
			case ${panic} in
			*[![:digit:].]*)
				panic=
				;;
			esac
			;;
		esac
	done

# Ensure consistent partition parameter naming
	set_part_params

	maybe_break modules

	mount -t tmpfs -o "noexec,nosuid,size=${RUNSIZE:-10%},mode=0755" tmpfs /run
	mkdir -m 0755 /run/initramfs

	if [ -n "$log_output" ]; then
		exec >$log_output 2>&1
		unset log_output
	fi

# Load driver modules
#
	[ "$quiet" != "y" ] && log_begin_msg "Loading essential drivers"
	load_modules
	[ "$quiet" != "y" ] && log_end_msg

	sleep 5
	mdev -s

	IMAGE_PARTITION=$(parse_disk "${IMAGE_PARTITION}")
	BOOT_PARTITION=$(parse_disk "${BOOT_PARTITION}")
	DATA_PARTITION=$(parse_disk "${DATA_PARTITION}")

# ok, all parsing done

	IMAGEMNT="/mnt/imgpart"
	BOOTMNT="/mnt/boot"
	USBMNT="/mnt/usb"

# Permanently mount image and boot partition
	[ -d /mnt ] || mkdir /mnt
	[ -d "${IMAGEMNT}" ] || mkdir "${IMAGEMNT}"
	[ -d "${BOOTMNT}" ] || mkdir "${BOOTMNT}"

# Mount partition with the squash file
	mount -t vfat "${BOOT_PARTITION}" "${BOOTMNT}"
	mount -t ext4 "${IMAGE_PARTITION}" "${IMAGEMNT}"

	maybe_break backup_gpt

# In case of a gpt boot partition: move the backup table when not done yet
# This function is also safe for non-gpt boot partitions (it will not trigger a mismatch).
#
	move_backup_gpt_table

	maybe_break search-firmw-upd

	if [ ! -z "${BOOT_DELAY}" ]; then
		log_begin_msg "Doing a ${BOOT_DELAY} second delay here to give kernel load a headstart"
		sleep ${BOOT_DELAY}
		log_end_msg
	fi

# ROOTFS update on usb disk?
#
	search_for_firmware_update_rootfs

	maybe_break search-fact-reset

# Factory reset file on usb ?
#
	search_for_factory_reset_on_additional_dev

# Factory reset file in boot partition?
#
	search_for_factory_reset_on_bootpart

	maybe_break krnl-rollbck

# Kernel update rollback ?
#
	search_for_kernel_rollback

	maybe_break krnl-upd

# Kernel update?
#
	process_kernel_update

	maybe_break resize-data

# Resize data partition?
#
	resize_datapartition

	maybe_break mnt-overlaysfs

# Create writable overlay from squashfs and a data partition folder
#
	mount_overlay_fs

	maybe_break modfstab

# Process fstab
#
	modify_fstab

# Move /run to the root so our logs are there when we boot
#
	mount -n -o move /run ${NEWROOT}/run

# Notify plymouth of new root
#
	/bin/plymouth --newroot=${NEWROOT}

# All done, switch to the permanent init process
#

# umount boot partition
  umount ${BOOTMNT}
  rm -r ${BOOTMNT}

	maybe_break switch-root

	log_success_msg "Finish initramfs, continue booting Volumio"
	exec switch_root ${NEWROOT} ${NEWINIT}
